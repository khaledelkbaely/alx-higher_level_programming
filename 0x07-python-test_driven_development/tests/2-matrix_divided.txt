the ``2-matrix_divided`` module
============================

Using ``matrix_divided``
---------------------

Import function from module:
  
  >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Test normal matrix:

  >>> matrix_divided([[2, 4, 8], [1, 2, 3]], 2)
  [[1.0, 2.0, 4.0], [0.5, 1.0, 1.5]]

Test one element:

  >>> matrix_divided([[2]], 2)
  [[1.0]]

Test division by negative:

  >>> matrix_divided([[2, 4, 8], [1, 2, 3]], -2)
  [[-1.0, -2.0, -4.0], [-0.5, -1.0, -1.5]]

Test division by inf:

  >>> matrix_divided([[2, 4, 8], [1, 2, 3]], float('inf'))
  [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

Test division by nan:

  >>> matrix_divided([[2, 4, 8], [1, 2, 3]], float('nan'))
  [[nan, nan, nan], [nan, nan, nan]]

Test division by zero:

  >>> matrix_divided([[2, 4, 8], [1, 2, 3]], 0)
  Traceback (most recent call last):
  ...
  ZeroDivisionError: division by zero

Test matrix with non number element:

  >>> matrix_divided([[2, 4, 8], [1, 'foo', 3]], 2)
  Traceback (most recent call last):
  ...
  TypeError: matrix must be a matrix (list of lists) of integers/floats

Test matrix with different rows:

  >>> matrix_divided([[2, 4, 8], [1, 3]], 2)
  Traceback (most recent call last):
  ...
  TypeError: Each row of the matrix must have the same size

Test empty matrix:

  >>> matrix_divided([[], [], []], 2)
  Traceback (most recent call last):
  ...
  TypeError: matrix must be a matrix (list of lists) of integers/floats

Test 1st arg is str:

  >>> matrix_divided('fpp', 2)
  Traceback (most recent call last):
  ...
  TypeError: matrix must be a matrix (list of lists) of integers/floats

Test 1st arg is empty list:

  >>> matrix_divided([], 2)
  Traceback (most recent call last):
  ...
  TypeError: matrix must be a matrix (list of lists) of integers/floats

Test division by non integer value:

  >>> matrix_divided([[2]], 'foo')
  Traceback (most recent call last):
  ...
  TypeError: div must be a number
