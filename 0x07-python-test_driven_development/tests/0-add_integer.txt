the ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

Import function from module:
  
  >>> add_integer = __import__('0-add_integer').add_integer

Test one int argument:

  >>> add_integer(2)
  100

Test one int argument and check defualt second:

  >>> add_integer(0)
  98

Test one float:

  >>> add_integer(123.9)
  221

Test one negative float:

  >>> add_integer(-95.5)
  3

Test two integers:

  >>> add_integer(10, 5)
  15

Test two big integers:

  >>> add_integer(999999998, 999999999)
  1999999997

Test integer and float:

  >>> add_integer(123, 7.12)
  130

Test a float and an integer:

  >>> add_integer(3.14, 66)
  69

Test two float:

  >>> add_integer(0.9, 0.23)
  0

Add infinity:

  >>> add_integer(float('inf'), float('inf'))
  Traceback (most recent call last):
  ...
  OverflowError: cannot convert float infinity to integer

Add nan:

  >>> add_integer(0, float('nan'))
  Traceback (most recent call last):
  ...
  ValueError: cannot convert float NaN to integer

Test first arg invalid:

  >>> add_integer('fff', 0)
  Traceback (most recent call last):
  ...
  TypeError: a must be an integer

Test second arg invalid:

  >>> add_integer(12, [])
  Traceback (most recent call last):
  ...
  TypeError: b must be an integer

Test two strings:

  >>> add_integer('ffp', 'ffs')
  Traceback (most recent call last):
  ...
  TypeError: a must be an integer
